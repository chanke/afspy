Design decisions in this package

General
=======

 * use lowercase_with_underscore coding style now every where

 * the application has to run with sufficient token.

 * permissions are checked on the DAO - Level

DAO
===

 * DAO returns a dict or list of dicts

 * DAO are agnostic of the model, so nothing to do with objects. 

 * DAO always raises an execption on error

 * DAOs are distinguished on the RPC-Level.

 * DAO casts variables to the correct datatype ( e.g. volume_id are integer )


Service
=======

 * A service returns an object, list of objects or NONE (if the request was not really invalid)

   * Objects returned by a service can be lazy
  
   * Objects are by default first looked up in the cache

 * A service method accepts an object or a unique attribute of that object as keyword

 * A service may throw an exception (wrong hostname used)

Unit-Tests
==========

 * each DAO and service has to have to unit-test.

Documentation
=============

 * pydoc is used for creating documentation

Database Cache
==============

 * expiry-time of an entry in the cache can be configured by table.

usage of variables
==================

 * Partitions are used canonicalized only (i.e. one or two letters)

 * Internally, servers are adressed by UUID

 * Timestamps are datetime.
